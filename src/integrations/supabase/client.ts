// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

/**
 * Supabase Configuration
 * 
 * Environment variables for connecting to the Supabase backend:
 * - VITE_SUPABASE_URL: Your project's unique Supabase URL
 * - VITE_SUPABASE_ANON_KEY: Public anon key for client-side operations
 * 
 * Security notes:
 * - The anon key is safe to use in client-side code
 * - Row Level Security (RLS) policies should be configured on the database
 * - Never expose service_role keys in client applications
 * - Environment variables with VITE_ prefix are available in browser
 */
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate environment variables
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error(
    'Missing Supabase environment variables. Please check your .env file contains VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY'
  );
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

/**
 * Supabase Client Instance
 * 
 * Configured with type safety using the generated Database types.
 * 
 * Authentication settings:
 * - storage: localStorage - persists auth state across browser sessions
 * - persistSession: true - maintains login state on page refresh
 * - autoRefreshToken: true - automatically refreshes expired tokens
 * 
 * Usage throughout the app:
 * - Authentication: supabase.auth.signUp(), signInWithPassword(), etc.
 * - Database queries: supabase.from('table').select(), insert(), update(), delete()
 * - Real-time subscriptions: supabase.channel().subscribe()
 */
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});